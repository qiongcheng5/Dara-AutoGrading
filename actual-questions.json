{
    "pseudo_questions": "1. Solve the following recurrence relation using substitution method(?):\na.x(n) = x(n-1) + 5 for n > 1, x(1) = 0\nb.x(n) = 3x(n-1) for n >= 1, x(1) = 4\nc.x(n) = x(n-1) + n for  n > 0, x(0) = 0\nd.x(n) = n x(n/3) + n for n>1, x(1) = 1 (solve for n=2^k)\ne.x(n) = n x(n/3) + n for n>1, x(1) = 1 (solve for n=3^k) \n\n 2. Finding asymptotic annotation of the recursive algorithm. \n Algorithm Q(n)\n// Input: A positive integer n\nif n = 1 return 1\nelse return Q(n - 1) + 2 * n - 1\n\n\na. Set up a recurrence relation for this functionâ€™s values and solve it to determine what this algorithm computes.\nb. Set up a recurrence relation for the number of multiplications made by this algorithm and solve it.\nc. Set up a recurrence relation for the number of additions/subtractions made by this algorithm and solve it.\n 3. Use master method to analyze time complexity:\n\na) Show that the solution of T(N) = 4T(N/2) + N is   T(N) = O(N2) \n\nb) Show that the solution of T(N) = 2T(N/2) + N is   T(N) = O(N log N) \n\nc)  Show that the solution of T(N) = 2T(N/2) + N2 is   T(N) = O(N2)\n\nd) Show that the solution of T(N) = 2T(N/2) + log2N is T(N) = O(N)",
    "pseudo_divided": "1a. Solve the following recurrence relation using substitution method(?): x(n) = x(n-1) + 5 for n > 1, with x(1) = 0.\n1b. Solve the following recurrence relation using substitution method(?): x(n) = 3x(n-1) for n >= 1, with x(1) = 4.\n1c. Solve the following recurrence relation using substitution method(?): x(n) = x(n-1) + n for n > 0, with x(0) = 0.\n1d. Solve the following recurrence relation using substitution method(?): x(n) = n * x(n/3) + n for n > 1, with x(1) = 1 (solve for n=2^k).\n1e. Solve the following recurrence relation using substitution method(?): x(n) = n * x(n/3) + n for n > 1, with x(1) = 1 (solve for n=3^k).\n2a. Finding asymptotic annotation of the recursive algorithm. \nAlgorithm Q(n)\nInput- A positive integer n\nif n = 1 return 1\nelse return Q(n - 1) + 2 * n - 1\n. Set up a recurrence relation for the values of the function Q(n) and solve it to determine what this algorithm computes.\n2b. Finding asymptotic annotation of the recursive algorithm. \nAlgorithm Q(n)\nInput- A positive integer n\nif n = 1 return 1\nelse return Q(n - 1) + 2 * n - 1\n. Set up a recurrence relation for the number of multiplications made by this algorithm and solve it.\n2c. Finding asymptotic annotation of the recursive algorithm. \nAlgorithm Q(n)\nInput- A positive integer n\nif n = 1 return 1\nelse return Q(n - 1) + 2 * n - 1\n. Set up a recurrence relation for the number of additions/subtractions made by this algorithm and solve it.\n3a. Use master method to analyze time complexity: Show that the solution of T(N) = 4T(N/2) + N is T(N) = O(N^2).\n3b. Use master method to analyze time complexity: Show that the solution of T(N) = 2T(N/2) + N is T(N) = O(N log N).\n3c. Use master method to analyze time complexity: Show that the solution of T(N) = 2T(N/2) + N^2 is T(N) = O(N^2).\n3d. Use master method to analyze time complexity: Show that the solution of T(N) = 2T(N/2) + log2N is T(N) = O(N).\n",
    "pseudo_num": "1. Solve the following recurrence relation using substitution method(?): x(n) = x(n-1) + 5 for n > 1, with x(1) = 0.\\n2. Solve the following recurrence relation using substitution method(?): x(n) = 3x(n-1) for n >= 1, with x(1) = 4.\\n3. Solve the following recurrence relation using substitution method(?): x(n) = x(n-1) + n for n > 0, with x(0) = 0.\\n4. Solve the following recurrence relation using substitution method(?): x(n) = n * x(n/3) + n for n > 1, with x(1) = 1 (solve for n=2^k).\\n5. Solve the following recurrence relation using substitution method(?): x(n) = n * x(n/3) + n for n > 1, with x(1) = 1 (solve for n=3^k).\\n6. Finding asymptotic annotation of the recursive algorithm. \\nAlgorithm Q(n)\\nInput- A positive integer n\\nif n = 1 return 1\\nelse return Q(n - 1) + 2 * n - 1\\n. Set up a recurrence relation for the values of the function Q(n) and solve it to determine what this algorithm computes.\\n7. Finding asymptotic annotation of the recursive algorithm. \\nAlgorithm Q(n)\\nInput- A positive integer n\\nif n = 1 return 1\\nelse return Q(n - 1) + 2 * n - 1\\n. Set up a recurrence relation for the number of multiplications made by this algorithm and solve it.\\n8. Finding asymptotic annotation of the recursive algorithm. \\nAlgorithm Q(n)\\nInput- A positive integer n\\nif n = 1 return 1\\nelse return Q(n - 1) + 2 * n - 1\\n. Set up a recurrence relation for the number of additions/subtractions made by this algorithm and solve it.\\n9. Use master method to analyze time complexity: Show that the solution of T(N) = 4T(N/2) + N is T(N) = O(N^2).\\n10. Use master method to analyze time complexity: Show that the solution of T(N) = 2T(N/2) + N is T(N) = O(N log N).\\n11. Use master method to analyze time complexity: Show that the solution of T(N) = 2T(N/2) + N^2 is T(N) = O(N^2).\\n12. Use master method to analyze time complexity: Show that the solution of T(N) = 2T(N/2) + log2N is T(N) = O(N).\\n",
    "questions": "1. Which function has a higher asymptotic order, (ln^2)*n and 5*(lg(n+1000)^4)\n\n2. Which function has a higher asymptotic order, 0.001*n^4+3*n^3+1 and 3000000*(n^3)\n\n3. Which function has a higher asymptotic order, 3^n and 2^(2n)\n\n4. Which function has a higher asymptotic order, 5*(lg(n+1000)^4) and n^(1/3)\n\n5. (Optional) Identify the lowest and highest order of growth among the following functions:\n\n(ln^2)*n, n^(1/3), 3^n, 2^(2n), 0.001*n^4+3*n^3+1, 5*(lg(n+1000)^4), (n-1)!\n\n6. (Optional) List the following functions according to their order of growth from the lowest to highest:\n\n(ln^2)*n, n^(1/3), 3^n, 2^(2n), 0.001*n^4+3*n^3+1, 5*(lg(n+1000)^4), (n-1)!"
}
