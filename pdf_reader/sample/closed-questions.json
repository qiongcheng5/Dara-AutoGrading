[
    {
        "question_col": "Find best data structure for each application.",
        "answer_col": "4",
        "SLO_name": "SLO1: Data structures",
        "max_score": 4,
        "output_col": "SLO1: Data structures_1_Score(4)"
    },
    {
        "question_col": "Find the matching runtime complexity for each psedudocode:\nA)findMin(x, y) { if (x  y) return x else return y}B)LinearSearch(numbers, N, key) { for (i = 0; i  N; ++i) if (numbers[i] == key) return i  return -1 // not found}C)SelectionSort(number, N) { for (i = 0; i  N; ++i) { indexSmallest = i for (j = i + 1; j  N; ++j) if (numbers[j]  numbers[indexSmallest]) indexSmallest = j temp = numbers[i] numbers[i] = numbers[indexSmallest] numbers[indexSmallest] = temp  }\n}\nD)BinarySearch(sortedNumbers, N, key) { mid = 0 low = 0 high = 0  high = N - 1  while (high = low) { mid = (high + low) / 2 if (sortedNumbers [mid]  key) low = mid + 1 else if (sortedNumbers [mid]  key) high = mid - 1 else return mid }  return -1 // not found}\nE)\nfor (int i = 0; i  n; i++)  for (int j = 1; j  n; j = j *2)    System.out.println(\"hello\");\nF)\nfor (int i = 0; i  n; i = i + 2)  for (int j = 1; j  n; j = j *3)    System.out.println(\"hello\");\nG)\nfor (int i = 1; i  n; i = i * 2)  for (int j = 1; j  n; j = j *3)    System.out.println(\"hello\");",
        "answer_col": "7",
        "SLO_name": "SLO1: Algorithm analysis",
        "max_score": 7,
        "output_col": "SLO1: Algorithm analysis_1(7)"
    },
    {
        "question_col": "Choose all statements that include syntax error(s).\n",
        "answer_col": "4.1",
        "SLO_name": "SLO1: Syntax",
        "max_score": 4,
        "output_col": "SLO1: Syntax_1(4)"
    },
    {
        "question_col": "How many syntax errors in the following code? Assume that all required packages have been imported.\nint size = 10;\nint [] array = (1, 2, 3, 4, 5);\narray = (10, 20, 30, 40, 50);\narray = new int(10);\nInteger array_size = size;\nArrayListint list = new ArrayListint(array_size);\nQueueInteger waitlist = new LinkedList();",
        "answer_col": "1",
        "SLO_name": "SLO1: Syntax",
        "max_score": 1,
        "output_col": "SLO1: Syntax_2(1)"
    },
    {
        "question_col": "Assume that we help make a music note class.\nEach music note should includes the following three integer attributes:\n\npitch that defines the degree of highness or lowness of a tone,\nduration that defines how long this note should be placed,\noctave that defines which group of notes should be played.\n\n\nLet us declare these data member variables for the Note class:\npublic class Note{\n  private int [pitch_variable]; // pitch variable that defines the degree of highness or lowness of a tone\n  private int [duration_variable]; // duration variable that defines how long this note should be placed\n  private int [octava_variable]; // octave variable that defines which group of notes should be played\n}",
        "SLO_name": "SLO5: Naming conventions",
        "max_score": 1,
        "answer_col": "1.3",
        "output_col": "SLO5: Naming conventions_1(1)"
    },
    {
        "question_col": "Assume that we help make a concert ticket class.\nEach concert ticket should that stores the name of a concert, the price, and the date\n\nLet us help complete the ConcertTicket class:\npublic class ConcertTicket implements Comparable {\n  private String name;  private Date date;  private double price;\n  /**  * Constructor with default value for all the fields.  *  * @param name of band  * @param date of the concert  * @param price of the ticket  */  public ConcertTicket(String name, Date date, double price) {    this.name = name;    this.date = date;    this.price = price;  }\n  /**  * Default constructor for this class.  */  public ConcertTicket() {    name = \"\";    date = new Date();    price = 0.0;  }\n  /**  * Getter returning the name of the band performing concert.  * @return name of the band  */  public String [get_name_function]() {    return name;  }\n  /**  * Setter storing the name of the band.  *  * @param name to be stored for the band  */  public void [set_name_function](String name) {    this.name = name;  }\n  /**  * Getter returning the date of the concert.  *  * @return the date of the concert  */  public Date [get_date_function]() {    return date;  }\n  /**  * Setter storing the date of the concert.  *  * @param date the date of the concert  */  public void [set_date_function](Date date) {    this.date = date;  }\n  /**  * Getter returning the price for the ticket to the concert.  *  * @return the price  */  public double [get_price_function]() {    return price;  }\n  /**  * Setter to set the price of the ticket of the concert.  *  * @param price the price of the ticket  */  public void [set_price_function](double price) {    this.price = price;  }\n}",
        "SLO_name": "SLO5: Naming conventions",
        "max_score": 1,
        "answer_col": "1.4",
        "output_col": "SLO5: Naming conventions_2(1)"
    }
]